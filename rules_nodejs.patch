diff --git a/internal/common/module_mappings.bzl b/internal/common/module_mappings.bzl
index c523b50a..0ca35995 100644
--- a/internal/common/module_mappings.bzl
+++ b/internal/common/module_mappings.bzl
@@ -80,7 +80,7 @@ def get_module_mappings(label, attrs, srcs = [], workspace_name = None, mappings
             mr = "%s/%s" % (workspace_name, mr)
         elif label.workspace_root:
             mr = "%s/%s" % (label.workspace_root, mr)
-        if attrs.module_root and attrs.module_root != ".":
+        if hasattr(attrs, "module_root") and attrs.module_root and attrs.module_root != ".":
             if attrs.module_root.endswith(".ts"):
                 if workspace_name:
                     # workspace_name is set only when doing module mapping for runtime.
diff --git a/internal/node/bazel_require_script.js b/internal/node/bazel_require_script.js
index 3d062b29..1dca5412 100644
--- a/internal/node/bazel_require_script.js
+++ b/internal/node/bazel_require_script.js
@@ -501,7 +501,15 @@ exports.escapeFunction = (root) => {
         return false;
     }
     function isOutPath(str) {
-        return !root || (!str.startsWith(root + path.sep) && str !== root);
+        return !root || (!str.startsWith(root + path.sep) && str !== root) ||
+            // don't allow symlink to escape to duplicate node_modules tree
+            (process.env.NODE_MODULES_ROOT &&
+                str.startsWith(root + path.sep + process.env.NODE_MODULES_ROOT + path.sep)) ||
+            // also cover the external legacy runfiles case for the above (incase
+            // --noexternal_legacy_runfiles not set)
+            (process.env.NODE_MODULES_ROOT && process.env.TEST_WORKSPACE &&
+                str.startsWith(root + process.env.TEST_WORKSPACE + path.sep + 'external' + path.sep +
+                    process.env.NODE_MODULES_ROOT + path.sep));
     }
     return { isEscape, isOutPath };
 };
diff --git a/internal/node/node.bzl b/internal/node/node.bzl
index 2c0bfefd..4ccb6885 100644
--- a/internal/node/node.bzl
+++ b/internal/node/node.bzl
@@ -25,7 +25,7 @@ load("//internal/common:expand_into_runfiles.bzl", "expand_location_into_runfile
 load("//internal/common:module_mappings.bzl", "module_mappings_runtime_aspect")
 load("//internal/common:path_utils.bzl", "strip_external")
 load("//internal/common:windows_utils.bzl", "create_windows_native_launcher_script", "is_windows")
-load("//internal/linker:link_node_modules.bzl", "write_node_modules_manifest")
+load("//internal/linker:link_node_modules.bzl", "module_mappings_aspect", "write_node_modules_manifest")
 load("//internal/node:node_repositories.bzl", "BUILT_IN_NODE_PLATFORMS")
 
 def _trim_package_node_modules(package_name):
@@ -78,7 +78,7 @@ def _compute_node_modules_root(ctx):
         ] if f])
     return node_modules_root
 
-def _write_loader_script(ctx):
+def _write_loader_script(ctx, node_modules_root):
     # Generates the JavaScript snippet of module roots mappings, with each entry
     # in the form:
     #   {module_name: /^mod_name\b/, module_root: 'path/to/mod_name'}
@@ -90,8 +90,6 @@ def _write_loader_script(ctx):
                 mapping = "{module_name: /^%s\\b/, module_root: '%s'}" % (escaped, mr)
                 module_mappings.append(mapping)
 
-    node_modules_root = _compute_node_modules_root(ctx)
-
     if len(ctx.attr.entry_point.files.to_list()) != 1:
         fail("labels in entry_point must contain exactly one file")
 
@@ -165,11 +163,13 @@ def _nodejs_binary_impl(ctx):
             sources_depsets.append(d.files)
     sources = depset(transitive = sources_depsets)
 
-    _write_loader_script(ctx)
+    node_modules_root = _compute_node_modules_root(ctx)
+
+    _write_loader_script(ctx, node_modules_root)
 
     script_path = _to_manifest_path(ctx, ctx.outputs.loader)
 
-    env_vars = "export BAZEL_TARGET=%s\n" % ctx.label
+    env_vars = "export NODE_MODULES_ROOT=%s\n" % node_modules_root
     for k in ctx.attr.configuration_env_vars + ctx.attr.default_env_vars:
         if k in ctx.var.keys():
             env_vars += "export %s=\"%s\"\n" % (k, ctx.var[k])
@@ -277,7 +277,7 @@ _NODEJS_EXECUTABLE_ATTRS = {
     "data": attr.label_list(
         doc = """Runtime dependencies which may be loaded during execution.""",
         allow_files = True,
-        aspects = [node_modules_aspect, module_mappings_runtime_aspect],
+        aspects = [node_modules_aspect, module_mappings_aspect, module_mappings_runtime_aspect],
     ),
     "default_env_vars": attr.string_list(
         doc = """Default environment variables that are added to `configuration_env_vars`.
